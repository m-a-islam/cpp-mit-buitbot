from buildbot.plugins import *

c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9989}}
c['buildbotURL'] = "http://localhost:8010/"
c['workers'] = [worker.Worker('cpp-worker', 'cpp-pass')]

factory = util.BuildFactory()

# clean & prep
factory.addStep(steps.RemoveDirectory(dir="build"))
factory.addStep(steps.MakeDirectory(dir="build"))

# 1) Clone your repo into "src"
factory.addStep(steps.Git(
    repourl="https://github.com/m-a-islam/cpp-mit-buitbot.git",
    mode="full",
    method="clean",
    workdir="src",
    haltOnFailure=True
))

# (optional) list files once so we can confirm paths
factory.addStep(steps.ShellCommand(
    name="ls-tree",
    workdir=".",
    command=["bash","-lc","pwd; echo '--- src ---'; find src -maxdepth 2 -type f | sort"]
))

# 2) Compile src/main.cpp from the builder root
factory.addStep(steps.ShellCommand(
    name="compile",
    workdir="src",
    command=["bash","-lc","g++ -std=c++17 -O2 -I include -o ../build/hello main.cpp"]
))

# 3) Run
factory.addStep(steps.ShellCommand(
    name="run",
    workdir=".",
    command=["bash","-lc","./build/hello"]
))

# 4) Simple test (update expected output if needed)
factory.addStep(steps.ShellCommand(
    name="test-output",
    workdir=".",
    command=["bash","-lc", 'out=$(./build/hello); echo "$out"; test "$out" = "Hello, Buildbot C++!"' ],
    haltOnFailure=True
))

# 5) Upload artifact to controller
factory.addStep(steps.FileUpload(
    workersrc="build/hello",
    masterdest=util.Interpolate("artifacts/hello-%(prop:buildnumber)s"),
    mode=0o755
))

c['builders'] = [util.BuilderConfig(name="hello-cpp", workernames=["cpp-worker"], factory=factory)]
c['schedulers'] = [schedulers.ForceScheduler(name="force", builderNames=["hello-cpp"])]
c['title'] = "Buildbot C++ Demo"
c['titleURL'] = "http://localhost:8010"
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}))
