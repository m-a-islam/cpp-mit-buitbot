# master/master.cfg
from buildbot.plugins import *

# 1) Workers
c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9989}}
c['workers'] = [worker.Worker('cpp-worker', 'cpp-pass')]
c['buildbotURL'] = "http://localhost:8010/"


# 2) --- C++ builder factory ---
factory = util.BuildFactory()

# start clean each time
factory.addStep(steps.RemoveDirectory(dir="build"))
factory.addStep(steps.MakeDirectory(dir="build"))


# checkout your public repo into "src"
factory.addStep(steps.Git(
    repourl="https://github.com/your-user/your-cpp-repo.git",
    mode="full",
    method="clean",
    workdir="src"
))

# copy hello.cpp from controller into the worker
#factory.addStep(steps.FileDownload(
#    mastersrc="files/hello.cpp",
#    workerdest="build/hello.cpp",
#    mode=0o644))

# compile (adjust the path to your real main/source files)
factory.addStep(steps.ShellCommand(
    name="compile",
    command=["bash","-lc","g++ -std=c++17 -O2 -o build/hello src/hello.cpp"]
))

factory.addStep(steps.ShellCommand(
    name="run",
    command=["bash","-lc","./build/hello"]
))
    
c['builders'] = [
    util.BuilderConfig(
        name="hello-cpp",
        workernames=["cpp-worker"],
        factory=factory
    )
]

factory.addStep(steps.ShellCommand(
    name="test-output",
    command=["bash","-lc", 'out=$(./build/hello); echo \"$out\"; test \"$out\" = \"Hello, Buildbot C++!\"' ],
    haltOnFailure=True
))

factory.addStep(steps.FileUpload(
    workersrc="build/hello",
    masterdest=util.Interpolate("artifacts/hello-%(prop:buildnumber)s"),
    mode=0o755
))

# upload the compiled binary back to the controller (as an artifact)
#factory.addStep(steps.FileUpload(
#    workersrc="build/hello",
#    masterdest=util.Interpolate("artifacts/hello-%(prop:buildnumber)s"),
#    mode=0o755
#))


# 3) Scheduler: manual trigger for now
c['schedulers'] = [schedulers.ForceScheduler(name="force", builderNames=["hello-cpp"])]

# 4) Web UI + metadata
c['title'] = "Buildbot C++ Demo"
c['titleURL'] = "http://localhost:8010"
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}))

# 5) Default DB: sqlite in the workdir (provided by the image)
# (No explicit DBURL needed â€” defaults to SQLite.)
